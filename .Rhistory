y
x <- "In the U.S.A. country C.I.A., D.C U.S.S.R and then N.Y. went to LA. to eat. much."
accron <- "(?<=[a-zA-Z])\\."
y <- gsub(accron,'', x, perl = TRUE)  ## test this
y
x <- "In the U.S.A. country C.I.A., D.C U.S.S.R and then N.Y. went to LA. to eat. much."
accron <- "(?<=[a-zA-Z])\\.(?=[a-zA-Z])"
y <- gsub(accron,'', x, perl = TRUE)  ## test this
y
## First Step
x <- "In the U.S.A. country C.I.A., D.C U.S.S.R and then N.Y. went to LA. to eat. much."
accron <- "(?<=[a-zA-Z]\\.[a-zA-Z])\\."
y <- gsub(accron,'', x, perl = TRUE)  ## test this
y
accron <- "(?<=[a-zA-Z])\\.(?=[a-zA-Z])"
y <- gsub(accron,'', x, perl = TRUE)  ## test this
y
x <- "In the U.S.A. country C.I.A., D.C U.S.S.R and then N.Y. went to LA. to eat. much."
accron <- "(?<=[a-zA-Z]\\.[a-zA-Z])\\."
y <- gsub(accron,'', x, perl = TRUE)  ## test this
y
## Second Step
x <- "In the U.S.A. country C.I.A., D.C U.S.S.R and then N.Y. went to LA. to eat. much."
accron <- "(?<=[a-zA-Z])\\.(?=[a-zA-Z])"
y <- gsub(accron,'', y, perl = TRUE)  ## test this
y
x <- "In the U.S.A. country C.I.A., D.C U.S.S.R and then N.Y. went to LA. to eat. much."
accron <- "(?<=[a-zA-Z]\\.[a-zA-Z])\\."
y <- gsub(accron,'', x, perl = TRUE)  ## test this
x
y
## Second Step
x <- "In the U.S.A. country C.I.A., D.C U.S.S.R and then N.Y. went to LA. to eat. much."
accron <- "(?<=[a-zA-Z])\\.(?=[a-zA-Z])"
y <- gsub(accron,'', y, perl = TRUE)  ## test this
y
## First Step
x <- "In the U.S.A. country C.I.A., D.C U.S.S.R and then N.Y. went to LA. to eat. much."
accron <- "(?<=\\.[a-zA-Z])\\." # Look behind a letter.letter
y <- gsub(accron,'', x, perl = TRUE)  ## test this
x
y
## First Step
x <- "In the U.S.A. country C.I.A., D.C U.S.S.R and then N.Y. went to LA. to eat. much."
accron <- "(?<=\\.[a-zA-Z]|?<= \\.[a-zA-Z])\\." # Look behind a letter.letter
y <- gsub(accron,'', x, perl = TRUE)  ## test this
x
y
## First Step
x <- "In the U.S.A. country C.I.A., D.C U.S.S.R and then N.Y. went to LA. to eat. much."
accron <- "(?<=\\.[a-zA-Z]| \\.[a-zA-Z])\\." # Look behind a letter.letter
y <- gsub(accron,'', x, perl = TRUE)  ## test this
x
y
## First Step
x <- "In the U.S.A. country C.I.A., D.C U.S.S.R and then N.Y. went to LA. to eat. much."
accron <- "(?<=\\.[a-zA-Z])\\." # Look behind a letter.letter
y <- gsub(accron,'', x, perl = TRUE)  ## test this
x
y
## First Step
x <- "In the U.S.A. country C.I.A., D.C U.S.S.R and then N.Y. went to LA. to eat. much."
accron <- "(?<=\\.[ a-zA-Z])\\." # Look behind a letter.letter
y <- gsub(accron,'', x, perl = TRUE)  ## test this
x
y
## First Step
x <- "In the U.S.A. country C.I.A., D.C U.S.S.R and then N.Y. went to LA. to eat. much."
accron <- "(?<=\\.[\\sa-zA-Z])\\." # Look behind a letter.letter
y <- gsub(accron,'', x, perl = TRUE)  ## test this
x
y
## First Step
x <- "In the U.S.A. country C.I.A., D.C U.S.S.R and then N.Y. went to LA. to eat. much."
accron <- "(?<=[\\s\\.][sa-zA-Z])\\." # Look behind a letter.letter
y <- gsub(accron,'', x, perl = TRUE)  ## test this
x
y
## First Step
x <- "In the U.S.A. country C.I.A., D.C U.S.S.R and then N.Y. went to LA. to eat. much."
accron <- "(?<=[\\s\\.][sa-zA-Z])\\." # match a letter or a period behind a letter behind
y <- gsub(accron,'', x, perl = TRUE)  ## test this
x
y
email  <- paste("([_a-z0-9-]+(\\.[_a-z0-9-]+)*@[a-z0-9-]+",
"(\\.[a-z0-9-]+)*(\\.[a-z]{2,4}))", sep = "")
x <- "aye me fui a me@hft y luego abdc@el.net"
y <- gsub(email, "", x)
x
y
x <- "aye me fui a me@hft.com y luego abdc@el.net"
y <- gsub(email, "", x)
x
y
x <- "In the U.S.A. country C.I.A., D.C U.S.S.R and then N.Y. went to LA. to eat. much."
acron <- "(?<=[\\s\\.][a-zA-Z])\\." # match a letter or a period behind a letter behind
y <- gsub(accron,'', x, perl = TRUE)
x
y
x <- tolower(x)
acron <- "(?<=[\\s\\.][a-z])\\." # match a letter or a period behind a letter behind
y <- gsub(accron,'', x, perl = TRUE)
x
y
blog <- readLines("en_US.blogs.txt", skipNul = TRUE)
length(blog)
source("preprocess_corpus.R")
blogclean <- preprocess.corpus(blog)
length(blogclean)
head(blog)
head(blogclean)
tail(blogclean)
x <- c(NULL)
x
x <- c(x, cleanblog)
x <- c(x, blogclean)
head(x)
head(blogclean)
source('~/Google Drive/JHCapstone/report_dataGenerator.R')
bin
mean(wpl)
blogPath        <- "en_US.blogs.txt"
blog   <- readLines(blogPath, skipNul = TRUE)
cleancorpus <- c(blog, blog)
head(cleancorpus)
write(cleancorpus, file = "clean_corpus.txt")
rm(cleancorpus, preprocess.corpus)
source('~/Google Drive/JHCapstone/report_dataGenerator.R')
cat(origcorpusPath, "does not exist, creating it now", "\n")
twitPath        <- "en_US.twitter.txt"
source('~/Google Drive/JHCapstone/report_dataGenerator.R')
source('~/Google Drive/JHCapstone/report_dataGenerator.R')
blogPath        <- "en_US.blogs.txt"
blog   <- readLines(blogPath, skipNul = TRUE)
blog <- preprocess.corpus(blog[1:1000])
source("preprocess_corpus.R")
blog <- preprocess.corpus(blog[1:1000])
cleanblog <- preprocess.corpus(blog[1:1000])
x <- blog
head(x)
blogPath        <- "en_US.blogs.txt"
blog   <- readLines(blogPath, skipNul = TRUE)
x <- blog[1:100]
head(x)
source("preprocess_corpus.R")
x2 <- preprocess.corpus(x)
head(x)
head(x2)
require(tm)
require(qdap)
require(stringr)
x <- tolower(x)
head(x)
email  <- paste("([_a-z0-9-]+(\\.[_a-z0-9-]+)*@[a-z0-9-]+",
"(\\.[a-z0-9-]+)*(\\.[a-z]{2,4}))", sep = "")
x <- gsub(email, "", x)                              ## remove emails
head(x)
x <- gsub("<[^<>]+>", "", x)                         ## remove HTML
head(x)
x <- gsub("http\\S+\\s*|www\\S+\\s*", "", x)         ## remove URLs
head(x)
acron <- "(?<=[\\s\\.][a-z])\\."                     ## acronym pattern
x <- gsub(acron,"", x, perl = TRUE)
head(x)
x <- replace_abbreviation(x)
head(x)
x <- replace_contraction(x)
head(x)
x <- unlist(strsplit(x, "[.]"))                      ## cut lines at periods
x <- tolower(x)
head(x)
badStems  <- readLines("badstems.txt", skipNul = T)
badLines  <- str_detect(x, paste(badStems, collapse = '|'))
goodIndex <- which(badLines==F)
x         <- x[goodIndex]
source('~/Google Drive/JHCapstone/report_dataGenerator.R')
source('~/Google Drive/JHCapstone/report_dataGenerator.R')
source('~/Google Drive/JHCapstone/report_dataGenerator.R')
source('~/Google Drive/JHCapstone/report_dataGenerator.R')
ngramCounts
newCounts <- matrix(0, ncol = 5, nrow = 4)
newCounts[1,] <- ngramCounts
newCounts
ngramCounts <- newCounts
ngramCounts
source('~/Google Drive/JHCapstone/report_dataGenerator.R')
save.image("reportWorkspace.Rdata")
gc()
source('~/Google Drive/JHCapstone/report_dataGenerator.R')
cosporaStats
corporaStats
corporaStats
ngramCounts
save.image("reportWorkspace2.Rdata")
save.image("reportWorkspace.Rdata")
ngramCounts <- ngramCounts[1:3,]
save.image("reportWorkspace.Rdata")
head(cleancorpus1gram)
dim(cleancorpus1gram)
knitr::opts_chunk$set(echo = T, cache = T, warning=F, message=F,
fig.align = 'center')
onegram <- cleancorpus1gram
head(onegram)
cumfreq <- cumsum(onegram$freq)
onegram <- cbind(onegram, cumfreq)
wordsTotal <- corporaStats[3,5]*(10^6)
dictPercent <- 100*cumfreq/wordsTotal
onegram     <- cbind(onegram, dictPercent)
wordsTotal
onegram     <- onegram[1:60000, c(1,5)]
onegram     <- onegram[1:60000,]
head(onegram)
X <- c(1:dim(onegram)[1])
head(X)
cbind(X, onegram)
class(onegram)
onegram     <- cbind(X, onegram, dictPercent)
onegram     <- onegram[1:60000, c(1,5)]
rm(onegram)
head(pcode)
ls()
(2.56-0.77)/2.56
library(tm)
stopList   <- data.table(word=stopwords(kind = "en"))
stopDummy  <- c(rep(1, length(stopList)))
stopList   <- data.table(stopList, stopDummy)
trim       <- function (x) gsub("^\\s+|\\s+$", "", x)
cleanWords <- cleancorpus1gram[1:300]
cleanWords <- rename(cleanWords, "ngrams" = "word")
head(cleanWords)
require(data.table)
cleanWords <- cleancorpus1gram[1:300]
cleanWords <- rename(cleanWords, "ngrams" = "word")
help(rename)
################################################################################
require(data.table)
require(plyr)
cleanWords <- cleancorpus1gram[1:300]
cleanWords <- rename(cleanWords, "ngrams" = "word")
setkey(cleanWords, word)
head(clenWords)
head(cleanWords)
cleanWords <- rename(cleanWords, "ngrams", "word")
cleanWords <- rename(cleanWords, "ngrams" = "word")
??rename
require(data.table)
require(dplyr)
cleanWords <- cleancorpus1gram[1:300]
cleanWords <- rename(cleanWords, "ngrams" = "word")
head(cleanWords)
blogWords <- blog1gram
blogWords <- rename(blogWords, "ngrams" = "word")
library(ggplot2);library(plyr);library(dplyr);library(grid)
library(gridExtra);library(memisc);library(data.table)
library(knitr); library(pander)
??meminsc
cleanWords <- cleancorpus1gram[1:300]
cleanWords <- rename(cleanWords, "ngrams" = "word")
head(cleanWords)
cleanWords <- cleancorpus1gram[1:300]
cleanWords
cleanWords <- setnames(cleanWords, "ngrams", "word")
cleanWords
cleanWords <- cleancorpus1gram[1:300]
cleanWords <- setnames(cleanWords, "ngrams", "word")
setkey(cleanWords, word)
setkey(stopList, word)
cleanWords   <- stopList[cleanWords, nomatch=NA]
cleanWords   <- cleanWords[order(-freq)]
cleanNonStop <- cleanWords[which(is.na(cleanWords$stopDummy)), c(1,3)]
cleanNonStop
stopList
cleanWords <- cleancorpus1gram[1:300]
cleanWords <- setnames(cleanWords, "ngrams", "word")
cleanWords$word <- trim(as.character(cleanWords$word))
setkey(cleanWords, word)
setkey(stopList, word)
cleanWords   <- stopList[cleanWords, nomatch=NA]
cleanWords   <- cleanWords[order(-freq)]
cleanNonStop <- cleanWords[which(is.na(cleanWords$stopDummy)), c(1,3)]
cleanNonStop
install.packages("wordclowd")
install.packages("wordcloud")
install.packages("wordcloud")
install.packages("wordcloud")
install.packages("wordcloud")
library(wordcloud)
help(wordcloud)
wordcloud(cleanWords[1:20, 1], cleanWords[1:20, 2])
head(cleanWords)
wordcloud(cleanNonStop[1:20, 1], cleanNonStop[1:20, 2])
wordcloud(cleanNonStop[1:30, 1], cleanNonStop[1:30, 2])
wordcloud(cleanNonStop[, 1], cleanNonStop[, 2], max.words = 50)
wordcloud(cleanNonStop[, 1], cleanNonStop[, 2], max.words = Inf)
wordcloud(cleanNonStop[, 1], cleanNonStop[, 2], max.words = 50)
wordcloud(cleanNonStop[, 1], cleanNonStop[, 2], max.words = 50, random.color = TRUE)
pal = brewer.pal(9,"BuGn")
help(brewer.pal)
wordcloud(cleanNonStop[, 1], cleanNonStop[, 2], max.words = 50, colors = pal)
display.brewer.all()
require(RColorBrewer)
pal = brewer.pal(10,"Spectral")
wordcloud(cleanNonStop[, 1], cleanNonStop[, 2], max.words = 50, colors = pal)
wordcloud(cleanNonStop[, 1], cleanNonStop[, 2], max.words = 50, colors = "Pastel")
wordcloud(cleanNonStop[, 1], cleanNonStop[, 2], max.words = 50, colors = pal)
wordcloud(cleanNonStop[, 1], cleanNonStop[, 2], max.words = 50,
colors = pal, random.order=FALSE)
display.brewer.all()
??colorRamps
??colorspace
display.brewer.all()
pal = brewer.pal(10,"RdPu")
wordcloud(cleanNonStop[, 1], cleanNonStop[, 2], max.words = 50,
colors = pal, random.order=FALSE)
help(wordcloud)
pal = brewer.pal(10,"RdPu")
wordcloud(cleanNonStop[, 1], cleanNonStop[, 2], max.words = 50,
colors = pal, random.order=FALSE)
wordcloud(cleanNonStop[, 1], cleanNonStop[, 2], max.words = 100,
colors = pal, random.order=FALSE)
pal = brewer.pal(8,"RdPu")
wordcloud(cleanNonStop[, 1], cleanNonStop[, 2], max.words = 100,
colors = pal, random.order=FALSE)
pal = brewer.pal(-2,"RdPu")
wordcloud(cleanNonStop[, 1], cleanNonStop[, 2], max.words = 100,
colors = pal, random.order=FALSE)
pal = brewer.pal(-8,"RdPu")
wordcloud(cleanNonStop[, 1], cleanNonStop[, 2], max.words = 100,
colors = pal, random.order=FALSE)
help(brewer.pal)
pal = brewer.pal(3:10,"RdPu")
wordcloud(cleanNonStop[, 1], cleanNonStop[, 2], max.words = 100,
colors = pal, random.order=FALSE)
pal = brewer.pal(1:7,"RdPu")
wordcloud(cleanNonStop[, 1], cleanNonStop[, 2], max.words = 100,
colors = pal, random.order=FALSE)
pal = brewer.pal(10,"RdPu")
wordcloud(cleanNonStop[, 1], cleanNonStop[, 2], max.words = 100,
colors = pal, random.order=FALSE)
pal = brewer.pal(10,"Blues")
wordcloud(cleanNonStop[, 1], cleanNonStop[, 2], max.words = 100,
colors = pal, random.order=FALSE)
pal = brewer.pal(10,"Dark2")
wordcloud(cleanNonStop[, 1], cleanNonStop[, 2], max.words = 100,
colors = pal, random.order=FALSE)
wordcloud(cleanNonStop[, 1], cleanNonStop[, 2], max.words = 120,
colors = pal, random.order=FALSE)
wordcloud(cleanNonStop[, 1], cleanNonStop[, 2], max.words = 100,
colors = pal, random.order=FALSE)
help(wordcloud)
wordcloud(cleanNonStop[, 1], cleanNonStop[, 2], max.words = 100,
colors = pal, random.order=FALSE, scale=c(4,0.5))
wordcloud(cleanNonStop[, 1], cleanNonStop[, 2], max.words = 100,
colors = pal, random.order=FALSE, scale=c(4,0.5), rot.per=0.25)
wordcloud(cleanNonStop[, 1], cleanNonStop[, 2], max.words = 100,
colors = pal, random.order=FALSE, scale=c(4,0.5), rot.per=0.2)
freqs <- c(10, 3)
wordcloud(cleanNonStop[, 1], cleanNonStop[, 2], max.words = 100, freq = freqs,
colors = pal, random.order=FALSE, scale=c(4,0.5), rot.per=0.2)
wordcloud(cleanNonStop[, 1], cleanNonStop[, 2], max.words = 100,
colors = pal, random.order=FALSE, scale=c(4,0.5), rot.per=0.2)
head(cleanNonStop)
clean(NonStop)
cleanNonStop
cleanWords <- cleancorpus1gram[1:300]
cleanWords <- setnames(cleanWords, "ngrams", "word")
cleanWords$word <- trim(as.character(cleanWords$word))
setkey(cleanWords, word)
setkey(stopList, word)
cleanWords   <- stopList[cleanWords, nomatch=NA]
cleanWords   <- cleanWords[order(-freq)]
cleanNonStop <- cleanWords[which(is.na(cleanWords$stopDummy)), c(1,3)]
library(wordcloud)
require(RColorBrewer)
pal = brewer.pal(10,"Spectral")
pal = brewer.pal(10,"Dark2")
freqs <- c(10, 3)
wordcloud(cleanNonStop[, 1], cleanNonStop[, 2], max.words = 100,
colors = pal, random.order=FALSE, scale=c(4,0.5), rot.per=0.2)
corporaStats
relfreq <- round(cleanNonStop$freq/(corporaStats[3,5]*(10^2)))
wordcloud(cleanNonStop$word, relfreq, max.words = 100,
colors = pal, random.order=FALSE, rot.per=0.2)
dim(cleanNonStop)
head(relfreq)
relfreq <- round(cleanNonStop$freq/(corporaStats[3,5]*(10^2)))
wordcloud(cleanNonStop$word, relfreq, max.words = 100,
colors = pal, random.order=FALSE, rot.per=0.2)
wordcloud(cleanNonStop$word, relfreq, max.words = 75,
colors = pal, random.order=FALSE, rot.per=0.2)
wordcloud(cleanNonStop$word, relfreq, max.words = 75,
colors = pal, random.order=FALSE, rot.per=0)
wordcloud(cleanNonStop$word, relfreq, max.words = 75,
colors = pal, random.order=FALSE, rot.per=1)
wordcloud(cleanNonStop$word, relfreq, max.words = 75,
colors = pal, random.order=FALSE, rot.per=.5)
wordcloud(cleanNonStop$word, relfreq, max.words = 75,
colors = pal, random.order=FALSE, rot.per=.3)
wordcloud(cleanNonStop$word, relfreq, max.words = 75,
colors = pal, random.order=FALSE, rot.per=.2)
wordcloud(cleanNonStop$word, relfreq, max.words = 75,
colors = pal, random.order=FALSE, rot.per=.1)
wordcloud(cleanNonStop$word, relfreq, max.words = 75,
colors = pal, random.order=FALSE, rot.per=.15)
wordcloud(cleanNonStop$word, relfreq, max.words = 75,
colors = pal, random.order=FALSE, rot.per=.5)
wordcloud(cleanNonStop$word, relfreq, max.words = 75,
colors = pal, random.order=FALSE, rot.per=.1)
wordcloud(cleanNonStop$word, relfreq, max.words = 75,
colors = pal, random.order=FALSE, rot.per=.1, main = "title")
wordcloud(cleanNonStop$word, relfreq, max.words = 75,
colors = rainbow, random.order=FALSE, rot.per=.1)
wordcloud(cleanNonStop$word, relfreq, max.words = 75,
colors = "rainbow", random.order=FALSE, rot.per=.1)
wordcloud(cleanNonStop$word, relfreq, max.words = 75,
colors = pal, random.order=FALSE, rot.per=.1)
df=read.table(text="name    freq    year
paris   5       2010
nyc     25      2010
tokyo   10      2011
rome    9       2011",
header=TRUE)
library(wordcloud)
wordcloud(words = df$name, freq = df$freq, min.freq = 1,scale = c(2, 0.2),
max.words=200, random.order=FALSE, rot.per=0.1,
ordered.colors=TRUE,
colors=brewer.pal(8, "Dark2")[factor(df$year)])
legend("topright", legend = levels(factor(df$year)),
text.col=brewer.pal(8, "Dark2")[unique(factor(df$year))])
wordcloud(words = df$name, freq = df$freq, min.freq = 1,scale = c(2, 0.2),
max.words=200, random.order=FALSE, rot.per=0.1,
ordered.colors=TRUE,
colors=pal[factor(df$year)])
legend("topright", legend = levels(factor(df$year)),
text.col=pal[unique(factor(df$year))])
wordcloud(words = df$name, freq = df$freq, min.freq = 1,scale = c(2, 0.2),
max.words=200, random.order=FALSE, rot.per=0.1,
ordered.colors=TRUE,
colors=pal[factor(df$year)])
legend("centerright", legend = levels(factor(df$year)),
text.col=pal[unique(factor(df$year))])
wordcloud(words = df$name, freq = df$freq, min.freq = 1,scale = c(2, 0.2),
max.words=200, random.order=FALSE, rot.per=0.1,
ordered.colors=TRUE,
colors=pal[factor(df$year)])
legend("right", legend = levels(factor(df$year)),
text.col=pal[unique(factor(df$year))])
wordcloud(words = df$name, freq = df$freq, min.freq = 1,
max.words=200, random.order=FALSE, rot.per=0.1,
ordered.colors=TRUE,
colors=pal[factor(df$year)])
legend("right", legend = levels(factor(df$year)),
text.col=pal[unique(factor(df$year))])
head(cleanNonStop)
dim(cleanNonStop)
head(relfreq)
wordcloud(cleanNonStop$word, relfreq, max.words = 75,
colors = pal, random.order=FALSE, rot.per=.1)
relfreq
unique(relfreq)
23/8
legend("right", legend = levels(factor(unique(relfreq[1:75]))),
text.col=pal[unique(relfreq[1:75])])
pal = brewer.pal(10,"PuRd")
wordcloud(cleanNonStop$word, relfreq, max.words = 75,
colors = pal, random.order=FALSE, rot.per=.1)
pal = brewer.pal(8,"PuRd")
wordcloud(cleanNonStop$word, relfreq, max.words = 75,
colors = pal, random.order=FALSE, rot.per=.1)
pal = brewer.pal(3:9,"PuRd")
wordcloud(cleanNonStop$word, relfreq, max.words = 75,
colors = pal, random.order=FALSE, rot.per=.1)
pal
wordcloud(cleanNonStop$word, relfreq, max.words = 75,
colors = pal, random.order=FALSE, rot.per=.1)
pal = (c(brewer.pal(9,"PuRd"), brewer.pal(9,"GnBu"), brewer.pal(9,"YlOrRd")))
wordcloud(cleanNonStop$word, relfreq, max.words = 75,
colors = pal, random.order=FALSE, rot.per=.1)
pal
pal = (c(brewer.pal(9,"PuRd"), brewer.pal(8,"Dark2")))
wordcloud(cleanNonStop$word, relfreq, max.words = 75,
colors = pal, random.order=FALSE, rot.per=.1)
pal = (c(brewer.pal(8,"Accent"), brewer.pal(8,"Dark2")))
wordcloud(cleanNonStop$word, relfreq, max.words = 75,
colors = pal, random.order=FALSE, rot.per=.1)
pal = (c(brewer.pal(8,"Set1"), brewer.pal(8,"Dark2")))
wordcloud(cleanNonStop$word, relfreq, max.words = 75,
colors = pal, random.order=FALSE, rot.per=.1)
pal = (c(brewer.pal(8,"RdPu"), brewer.pal(8,"Dark2")))
wordcloud(cleanNonStop$word, relfreq, max.words = 75,
colors = pal, random.order=FALSE, rot.per=.1)
wordcloud(cleanNonStop$word, relfreq, max.words = 75,
colors = -pal, random.order=FALSE, rot.per=.1)
pal <- (c(brewer.pal(8,"RdPu"), brewer.pal(8,"Dark2")))
pal <- (-pal)
wordcloud(cleanNonStop$word, relfreq, max.words = 75,
colors = pal, random.order=FALSE, rot.per=.1)
pal
-pal
pal <- (c(brewer.pal(8,"RdPu"), brewer.pal(8,"Dark2")))
pal <- rev(pal)
wordcloud(cleanNonStop$word, relfreq, max.words = 75,
colors = pal, random.order=FALSE, rot.per=.1)
materialPal <- c("#000000", "#3f51b5", "#5677fc", "#9c27b0", "#9c27b0",
"#ff5722", "#cddc39", "#00bcd4", "#607D8B")
wordcloud(cleanNonStop$word, relfreq, max.words = 75,
colors = materialPal, random.order=FALSE, rot.per=.1)
wordcloud(cleanNonStop$word, relfreq, max.words = 75,
colors = rev(materialPal), random.order=FALSE, rot.per=.1)
pal = brewer.pal(10,"Dark2")
wordcloud(cleanNonStop$word, relfreq, max.words = 75,
colors = pal, random.order=FALSE, rot.per=.1)
